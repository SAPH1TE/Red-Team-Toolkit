#how dare you think that i leave junk code in my files, besides quite litterally everyhing below this line is unused IGNORE THIS FILE AS THIS IS JUST STORED FOR DEVELOPMENT PURPOSES

import requests
from fp.fp import FreeProxy  # type: ignore # pip install free-proxy

# --- IMPORTANT SECURITY WARNING ---
# Free proxies are public and can be untrustworthy. They might be operated by
# malicious actors who could monitor, log, or even modify your traffic.
# Avoid sending any sensitive, personal, or private data when using them.
# For any serious application, use a reputable, private proxy service.

def get_user_choice(prompt: str, max_index: int) -> int:
    """
    Prompts the user for a numeric choice and validates the input.

    It ensures the input is an integer within the valid range [0, max_index].
    It will re-prompt the user until a valid input is received.
    """
    while True:
        try:
            choice = int(input(prompt))
            if 0 <= choice <= max_index:
                return choice
            else:
                print(f"  [Error] Please enter a number between 0 and {max_index}.")
        except ValueError:
            print("  [Error] Invalid input. Please enter a whole number.")
        except KeyboardInterrupt:
            print("\nExiting program.")
            exit()

def fetch_proxies(country_id=None, timeout=1.0, https=True):
    """
    Fetches a list of unique, working proxies.
    """
    print("WARNING: Using free proxies can expose you to security risks.")
    print("Avoid sending any sensitive, personal, or private data. feel free to back out with Ctrl+C.")
    print("Fetching proxies…")
    print("This can take a substantial amount of time")
    fp = FreeProxy(country_id=country_id, timeout=timeout, rand=True, https=https)
    proxies = []
    # Try to fetch up to 10 unique working proxies. The `get()` method finds one at a time.
    for i in range(10):
        try:
            p = fp.get()
            print(f"  Fetched proxy: {p}")
            proxies.append(p)
        except Exception:
            # This can happen if the library fails to find a working proxy in time.
            print(f"  Could not fetch a proxy on attempt {i+1}.")
            continue
    # Return only the unique proxies found
    return list(set(proxies))

def test_proxy(proxy_url, test_url="https://httpbin.org/ip", timeout=5):
    """
    Tests a single proxy by making a request to a test URL.
    Returns the origin IP if successful, otherwise None.
    """
    try:
        proxies = {"http": proxy_url, "https": proxy_url}
        resp = requests.get(test_url, proxies=proxies, timeout=timeout)
        if resp.status_code == 200:
            return resp.json().get("origin", "")
    except requests.exceptions.RequestException:
        # Catching specific request exceptions is better practice.
        return None
    return None

def run():
    """
    Main function to orchestrate fetching, testing, and using a proxy.
    """
    proxies = fetch_proxies(country_id=["US", "BR"], timeout=0.8)

    if not proxies:
        print("\nNo proxies could be fetched. Please check your connection or try again later.")
        return

    print("\nTesting fetched proxies…")
    alive = []
    for p in proxies:
        origin = test_proxy(p)
        if origin:
            print(f"  [SUCCESS] {p} is alive and shows IP {origin}")
            alive.append((p, origin))
        else:
            print(f"  [FAILED]  {p} is not responding.")

    if not alive:
        print("\nNo working proxies were found from the fetched list. Try again.")
        return

    print("\n--- Alive Proxies ---")
    for idx, (p, orig) in enumerate(alive):
        print(f"  [{idx}] {p} (appears as IP: {orig})")
    print("---------------------")

    # Use the robust input handler to get user's choice
    prompt = f"Pick a proxy to use (0–{len(alive)-1}): "
    choice_index = get_user_choice(prompt, len(alive) - 1)
    proxy_url, _ = alive[choice_index]

    print(f"\nUsing proxy: {proxy_url}")
    try:
        proxies_dict = {"http": proxy_url, "https": proxy_url}
        resp = requests.get("https://httpbin.org/headers", proxies=proxies_dict, timeout=10)
        print("Success! Response headers from https://httpbin.org/headers through proxy:")
        print(resp.json())
    except requests.exceptions.RequestException as e:
        print(f"\nAn error occurred while using the selected proxy: {e}")

if __name__ == "__main__":
    run()